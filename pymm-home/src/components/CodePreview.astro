---
import { createHighlighter } from "shiki";

interface Props {
  title?: string;
  language?: string;
  content?: string;
}

const {
  title = "",
  language = "python",
  content,
} = Astro.props;

// Get code either from content prop or from slot
let code: string;
if (content) {
  code = content.trim();
} else {
  const slot = await Astro.slots.render("default");
  // Remove HTML tags and decode HTML entities
  code = slot
    .replace(/<[^>]*>/g, "") // Remove any HTML tags
    .replace(/&quot;/g, '"') // Decode quotes
    .replace(/&amp;/g, "&") // Decode ampersands
    .replace(/&lt;/g, "<") // Decode less than
    .replace(/&gt;/g, ">") // Decode greater than
    .trim();
}

// Create highlighter instance with built-in dark theme
const highlighter = await createHighlighter({
  themes: ["dark-plus"],
  langs: ["python"],
});

// Generate highlighted HTML
const highlightedCode = highlighter.codeToHtml(code, {
  lang: language,
  theme: "dark-plus",
});
---

<div class="code-preview">
  <div class="code-header">
    <div class="code-controls">
      <span class="dot red"></span>
      <span class="dot yellow"></span>
      <span class="dot green"></span>
    </div>
    <span class="code-title">{title}</span>
  </div>
  <div class="code-content">
    <Fragment set:html={highlightedCode} />
  </div>
</div>

<style>
  .code-preview {
    background: #1e293b;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    max-width: 500px;
    width: 100%;
  }

  .code-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 1.5rem;
    background: #334155;
    border-bottom: 1px solid #475569;
  }

  .code-controls {
    display: flex;
    gap: 0.5rem;
  }

  .dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
  }

  .dot.red {
    background: #ef4444;
  }
  .dot.yellow {
    background: #eab308;
  }
  .dot.green {
    background: #22c55e;
  }

  .code-title {
    color: #e2e8f0;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .code-content {
    padding: 1.5rem;
    text-align: left !important;
  }

  /* Override Shiki's default styles to match our design */
  .code-content :global(pre) {
    margin: 0 !important;
    background: transparent !important;
    padding: 0 !important;
    font-family: "SF Mono", Monaco, "Cascadia Code", "Roboto Mono", Consolas,
      "Courier New", monospace !important;
    font-size: 0.875rem !important;
    line-height: 1.7 !important;
    text-align: left !important;
  }

  .code-content :global(code) {
    font-family: "SF Mono", Monaco, "Cascadia Code", "Roboto Mono", Consolas,
      "Courier New", monospace !important;
    font-size: 0.875rem !important;
    line-height: 1.7 !important;
    text-align: left !important;
  }

  /* Custom color overrides to match original Hero.astro colors */
  .code-content :global(.token.keyword) {
    color: #c084fc !important;
  } /* keyword (purple) */
  .code-content :global(.token.namespace) {
    color: #60a5fa !important;
  } /* module (blue) */
  .code-content :global(.token.function) {
    color: #fbbf24 !important;
  } /* function (yellow) */
  .code-content :global(.token.parameter) {
    color: #f87171 !important;
  } /* param (red) */
  .code-content :global(.token.variable) {
    color: #34d399 !important;
  } /* variable (green) */
  .code-content :global(.token.comment) {
    color: #6b7280 !important;
  } /* comment (gray) */
  .code-content :global(.token.string) {
    color: #fbbf24 !important;
  } /* strings (yellow) */
</style>
